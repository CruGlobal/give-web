//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
    @include container-fixed;

    @media (min-width: $screen-sm-min) {
        width: $container-sm;
    }

    @media (min-width: $screen-md-min) {
        width: $container-md;
    }

    @media (min-width: $screen-lg-min) {
        width: $container-lg;
    }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
    @include container-fixed;
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
    @include make-row;
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);

$grid-columns: 12;

@mixin calc-grid-column-ie($index, $class, $type) {
    @if ($type == width) and ($index > 0) {
        .col-#{$class}-#{$index} {
            width: percentage(($index / $grid-columns)) !important;
        }
    }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns-ie($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid-column-ie($i, $class, $type);
    }
}

@mixin make-grid-ie($class) {
    @include loop-grid-columns-ie($grid-columns, $class, width);
}


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

//@media (min-width: $screen-sm-min) {
//  @include make-grid(md);
//}

@include make-grid-ie(md);
